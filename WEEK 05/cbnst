bisection methord 
#include<stdio.h>
#include<conio.h>
#include<math.h>
float f(float x)
{
    return 3*x + sin(x) â€“ exp(x);
}
int main()
{
	 float x0, x1, x2, f0, f1, f2, e;
	 int step = 1;
	 printf("\nEnter two initial guesses:\n");
	 scanf("%f%f", &x0, &x1);
	 printf("Enter tolerable error:\n");
	 scanf("%f", &e);
               f0 = f(x0);
	 f1 = f(x1);
	 if( f0 * f1 > 0.0)
	 {
		  printf("Incorrect Initial Guesses.\n");	 
	 }
 
	 printf("\nStep\t\tx0\t\tx1\t\tx2\t\tf(x2)\n");
               do
	 {
		  x2 = (x0 + x1)/2;
		  f2 = f(x2);
		
		  printf("%d\t\t%f\t%f\t%f\t%f\n",step, x0, x1, x2, f2);
		  if( f0 * f2 < 0)
		  {
			   x1 = x2;
			   f1 = f2;
		  }
		  else
		  {
			   x0 = x2;
			   f0 = f2;
		  }
		  step = step + 1;
	 }while(fabs(f2)>e);
	 printf("\nRoot is: %f", x2);
}


ragular 
#include<stdio.h>
#include<conio.h>
#include<math.h>
float f(float x)
{
    return 3*x + sin(x) - exp(x);
}
int main()
{
	 float x0, x1, x2, f0, f1, f2, e;
	 int step = 1;
	 printf("\nEnter two initial guesses:\n");
	 scanf("%f%f", &x0, &x1);
	 printf("Enter tolerable error:\n");
	 scanf("%f", &e);
     f0 = f(x0);
	 f1 = f(x1);
	
	 if( f0 * f1 > 0.0)
	 {
		  printf("Incorrect Initial Guesses.\n");
		 
	 }
	 printf("\nStep\t\tx0\t\tx1\t\tx2\t\tf(x2)\n");
 do
	 {
		  x2 = x0 - ((x0 - x1) * f0)/(f0 - f1);
		  f2 = f(x2);
		
		  printf("%d\t\t%f\t%f\t%f\t%f\n",step, x0, x1, x2, f2);
		
		  if( f0 * f2 < 0)
		  {
			   x1 = x2;
			   f1 = f2;
		  }
		  else
		  {
			   x0 = x2;
			   f0 = f2;
		  }
		  step = step + 1;
	 }while(fabs(f2)>e);
	 printf("\nRoot is: %f", x2);
}


newton
#include<stdio.h>
#include<conio.h>
#include<math.h>
#include<stdlib.h>
float f(float x){
    return 3*x - cos(x) -1;
}
float g(float x){
    return 3 + sin(x);
}
void main()
{
	 float x0, x1, f0, f1, g0, e;
	 int step = 1, N;
	 
     /* Inputs */
	 printf("\nEnter initial guess:\n");
	 scanf("%f", &x0);
	 printf("Enter tolerable error:\n");
	 scanf("%f", &e);
	 printf("Enter maximum iteration:\n");
	 scanf("%d", &N);
	 printf("\nStep\t\tx0\t\tf(x0)\t\tx1\t\tf(x1)\n");
	 do
	 {
		  g0 = g(x0);
		  f0 = f(x0);
		  if(g0 == 0.0)
		  {
			   printf("Mathematical Error.");
			   exit(0);
		  }

		
		  x1 = x0 - f0/g0;

		
		  printf("%d\t\t%f\t%f\t%f\t%f\n",step,x0,f0,x1,f1);
		  x0 = x1;
		  
		  step = step+1;
		
		  if(step > N)
		  {
			   printf("Not Convergent.");
			   exit(0);
		  }
		  
		  f1 = f(x1);
		  
	 }while(fabs(f1)>e);
	
	 printf("\nRoot is: %f", x1);
}


gauss elimination arunima 
#include<stdio.h>
#include <stdbool.h>
#include <string.h>
#include<stdlib.h>
int main()
{   
         //TANYA_MADAN_SEC H_20022458_BTECH CSE_17//
    int n;
    float a[100][101]={0};
    printf("enter the number of equations you have\n");
    scanf("%d",&n);
    int in_i=0;
    int xyz=0;
    while(n--)
    {
        char s[200];
        printf("enter the equation\n");
        scanf("%s",s);
        bool flag=false;
        int num=0;
        int cont=0;             //for setting the value of the constant
        int sign=1;
        for(int i=0;i<strlen(s);i++)
        {
            if(flag&&(s[i]>='0'&&s[i]<='9'))
            {
                cont=cont*10+(s[i]-'0');
            }
          if(s[i]=='=')             //now constant needs to be evaluated
          flag=true;
            
          else if(s[i]=='-')
             sign=-1;
            
        else if(s[i]=='x')
            {
                a[in_i][0]=sign*num==0?1:sign*num;
                num=0;
                xyz++;
                sign=1;
            }
        else if(s[i]=='y')
         {
             a[in_i][1]=sign*num==0?1:sign*num;
                num=0;
                if(xyz==0)
                a[in_i][0]=0;
                xyz++;
                  sign=1;
         }
         else if(s[i]=='z')
         {
             a[in_i][2]=sign*num==0?1:sign*num;
                num=0;
                if(xyz==0)
                {
                    a[in_i][0]=0;
                    a[in_i][1]=0;
                }
                if(xyz==1)
                {
                    if(a[in_i][1]=='\0')
                      a[in_i][1]=0;
                      else
                      a[in_i][0]=0;
                }
                  sign=1;
                xyz++;
         }
         else if(s[i]>='0'&&s[i]<='9')
            {
                num=num*10+(s[i]-'0');
            }
        }
        a[in_i][3]=sign*cont;
        in_i++;
    }
    float t;
    int i , j, k;
         

    printf("Equation 1: (%.0f)x+(%.0f)y+(%.0f)z=%.0f\n", a[0][0], a[0][1], a[0][2], a[0][3]);
    printf("Equation 2: (%.0f)x+(%.0f)y+(%.0f)z=%.0f\n", a[1][0], a[1][1], a[1][2], a[1][3]);
    printf("Equation 3: (%.0f)x+(%.0f)y+(%.0f)z=%.0f\n", a[2][0], a[2][1], a[2][2], a[2][3]);
    
    printf("\n\n");
    printf("Augmented Matrix: \n");
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 4; j++)
        {
            printf("%f ",a[i][j]);
        }
        printf(" \n");
    }

    printf("\n");
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 3; j++)
        {
            if (i != j)
            {
                t = a[j][i] / a[i][i];
                for (k = 0; k < 4; k++)
                    a[j][k] = a[j][k] - (a[i][k] * t);
            }
        }
    }

    printf("Final  Matrix form : \n");
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 4; j++)
        {
            printf("\t %.0f", a[i][j]);
        }
        printf("\n");
    } 

    printf("\n\nSolution is :\n ");
    for (i = 0; i < 3; i++)
    {   
        printf("%f ", a[i][3] / a[i][i]);
    }
    return 0;
}

newton comman
#include<stdio.h>
int main()
{
    int i,j,k,n;
    float A[20][20],c,x[10],sum=0.0;
    printf("\nEnter the order of matrix: ");
    scanf("%d",&n);
    printf("\nEnter the elements of augmented matrix row-wise:\n\n");
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=(n+1); j++)
        {
            printf("A[%d][%d] : ", i,j);
            scanf("%f",&A[i][j]);
        }
    }
    for(j=1; j<=n; j++) /* loop for the generation of upper triangular matrix*/
    {
        for(i=1; i<=n; i++)
        {
            if(i>j)
            {
                c=A[i][j]/A[j][j];
                for(k=1; k<=n+1; k++)
                {
                    A[i][k]=A[i][k]-c*A[j][k];
                }
            }
        }
    }
    x[n]=A[n][n+1]/A[n][n];
    /* this loop is for backward substitution*/
    for(i=n-1; i>=1; i--)
    {
        sum=0;
        for(j=i+1; j<=n; j++)
        {
            sum=sum+A[i][j]*x[j];
        }
        x[i]=(A[i][n+1]-sum)/A[i][i];
    }
    printf("\nThe solution is: \n");
    for(i=1; i<=n; i++)
    {
        printf("\nx%d=%f\t",i,x[i]); /* x1, x2, x3 are the required solutions*/
    }
    return(0);
}

